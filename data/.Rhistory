lowery = min(sin(xval), sin(xval+pi))
highery = max(sin(xval), sin(xval+pi))
midy = mean(c(lowery, highery))
# Draw nucleic acid and its counter part
lines(x=c(xval,xval), y=c(lowery, midy-0.05), col=colors[colorindex[i]], lwd=2)
lines(x=c(xval,xval), y=c(midy+0.05, highery), col=countercolors[colorindex[i]], lwd=2)
}
# Draw RNA strand
plot(sinx[70:200], siny[70:200], type="l", ylab="", xlab="", axes=F, lwd=2)
# Add nucleic acids
for(i in which((xvals > sinx[70]) & (xvals < sinx[200]))){
xval = xvals[i]
#
lowery = min(sin(xval), sin(xval+pi))
highery = max(sin(xval), sin(xval+pi))
midy = mean(c(lowery, highery))
# Draw nucleic acid
if(sin(xval) > sin(xval+pi)){
lines(x=c(xval,xval), y=c(midy+0.05, highery), col=countercolors[colorindex[i]], lwd=2)
} else{
lines(x=c(xval,xval), y=c(lowery, midy-0.05), col=colors[colorindex[i]], lwd=2)
}
}
}
PlotDNA
PlotDNA()
PlotDNA = function(){
par(mfrow=c(2,1))
# Draw DNA strands
sinx = seq(pi/2, 30, by=0.1)
siny = sin(sinx)
siny2 = sin(sinx+pi)
plot(sinx, siny, type="l", ylab="", xlab="", axes=F, lwd=2)
lines(sinx, siny2, lwd=2)
# Add nucleic acids
xvals = seq(pi/2, 30, by=0.5)
colors = c("blue", "skyblue", "orange", "brown")
countercolors = c("skyblue", "blue", "brown", "orange")
set.seed(252525)
colorindex = sample(1:4, size=length(xvals), replace=T)
for(i in 1:length(xvals)){
xval = xvals[i]
#
lowery = min(sin(xval), sin(xval+pi))
highery = max(sin(xval), sin(xval+pi))
midy = mean(c(lowery, highery))
# Draw nucleic acid and its counter part
lines(x=c(xval,xval), y=c(lowery, midy-0.05), col=colors[colorindex[i]], lwd=2)
lines(x=c(xval,xval), y=c(midy+0.05, highery), col=countercolors[colorindex[i]], lwd=2)
}
# Draw RNA strand
plot(sinx[70:200], siny[70:200], type="l", ylab="", xlab="", axes=F, lwd=2, xlim=c(sinx[1], sinx[length(sinx)]))
# Add nucleic acids
for(i in which((xvals > sinx[70]) & (xvals < sinx[200]))){
xval = xvals[i]
#
lowery = min(sin(xval), sin(xval+pi))
highery = max(sin(xval), sin(xval+pi))
midy = mean(c(lowery, highery))
# Draw nucleic acid
if(sin(xval) > sin(xval+pi)){
lines(x=c(xval,xval), y=c(midy+0.05, highery), col=countercolors[colorindex[i]], lwd=2)
} else{
lines(x=c(xval,xval), y=c(lowery, midy-0.05), col=colors[colorindex[i]], lwd=2)
}
}
}
PlotDNA()
23.99+22.49+9.99+19.49
23.99+22.49+9.99+19.49 + 84 + 2*13.2
seq(3, 10, by=2)
m = matrix(1:12,4)
m
m - c(1,2,3,4)
library(MASS)
temp = matrix(rnorm(1000), nrow=10)
donor = sample(c("D1","D2","D3","D4","D5"), size=100, replace=T)
ages = runif(100, min=1, max=15)
rlm(temp[1,]~donor+ages)
temp = rlm(temp[1,]~donor+ages)
temp$coefficients
temp$residuals
temp = matrix(rnorm(1000), nrow=10)
res = rlm(temp[1,]~donor+ages)
res$coefficients
res$residuals[1:5]
temp[1,1:5]
temp[1,1] + (0.08798991-0.30185003+14.23*0.01288708)
temp[1,1] - (0.08798991-0.30185003+14.23*0.01288708)
coefficients = apply(temp, 1, function(d){
temp2 = rlm(d~donor+ages)
return(temp2$coefficients)
})
coefficients
exp(2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
install.packages("installr")
install.Rtools()
library(installr)
install.Rtools()
library(MASS)
donors = rep(c("D1","D2","D3"), each=10)
expression = 10 + c(runif(10,0,1),runif(10,1,2),runif(10,0,2))*2
data = as.data.frame(cbind(expression, donors))
View(data)
rlm(expression~., data=data)
data = cbind(expression, donors)
rlm(expression~., data=data)
data = as.data.frame(cbind(expression, donors))
class(data[,2])
class(data[,1])
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
rlm(expression~+0, data=data)
rlm(expression~.+0, data=data)
smokes = rep(c("Y","N"), each=5, times=3)
smokes
expression = 10 + c(runif(10,0,1),runif(10,1,2),runif(10,0,2)) + 0.5*c(smokes=="Y")
data = as.data.frame(cbind(expression, donors, smokes))
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
expression = 10 + c(runif(10,3,5),runif(10,1,2),runif(10,0,2)) + 0.5*c(smokes=="Y")
data = as.data.frame(cbind(expression, donors, smokes))
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
expression = 10 + c(runif(10,3,5),runif(10,1,2),runif(10,0,1)) + 0.5*c(smokes=="Y")
data = as.data.frame(cbind(expression, donors, smokes))
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
expression = 10 + c(runif(10,3,5),runif(10,1,2),runif(10,0,1)) + 0.5*c(smokes=="Y")
data = as.data.frame(cbind(expression, smokes, donors))
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
expression = 10 + c(runif(10,1,2),runif(10,3,5),runif(10,0,1)) + 0.5*c(smokes=="Y")
data = as.data.frame(cbind(expression, smokes, donors))
data[,1] = as.numeric(data[,1])
rlm(expression~., data=data)
temp = c(3,2,3)
names(temp) = letters[1:3]
temp
temp[c(setdiff(1:length(temp), which(temp==2)), which(temp==2))]
temp[c(setdiff(1:length(temp), which(temp==4)), which(temp==4))]
dnorm(0, sd=0.5)
relval = function(x, sdev=0.5){(0.5*x+1.5)/dnorm(0,0,sdev)*dnorm(x, mean=0, sd=sdev)-1}
relval(0.5)
relval(0.5, 0.4)
relval(0, 0.4)
relval = function(x, sdev=0.5, start=0){(0.5*x+1.5)/dnorm(0,start,sdev)*dnorm(x, mean=start, sd=sdev)-1}
relval(0, 0.4)
relval(1, 0.4)
relval(-11, 0.4)
relval(-1, 0.4)
relval(-1, 0.4)
relval = function(x, sdev=0.5, start=0){(0.5*start+1.5)/dnorm(0,start,sdev)*dnorm(x, mean=start, sd=sdev)-1}
relval = function(x, sdev=0.5, start=0){(0.5*start+1.5)/dnorm(0,0,sdev)*dnorm(x, mean=start, sd=sdev)-1}
relval(-1, 0.4)
relval(1, 0.4)
relval(0.5, 0.4)
relval(0, 0.4)
relval(0, 0.4, 0.1)
relval(0.1, 0.4, 0.1)
relval(0.5, 0.4, 0.1)
relval(-0.5, 0.4, 0.1)
relval(-1, 0.4, 0.1)
relval(1, 0.4, 0.1)
relval(1, 0.4, 0.4)
relval(0.4, 0.4, 0.4)
relval(0.7, 0.4, 0.4)
relval(0.7, 0.5, 0.4)
relval(0.4, 0.5, 0.4)
relval(1, 0.5, 0.4)
relval(-1, 0.5, 0.4)
relval(0, 0.5, 0.4)
data_donorshuffle = data[c(21:30,1:10,2:20),]
View(data_donorshuffle)
rlm(expression~., data=data)
order(c(4, 0.1, -1, 3.1))
order(order(c(4, 0.1, -1, 3.1)))
library(TcGSA)
coefs = array(0, dim=c(1000, 100, 2))
nrow(coefs)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ROntoTools")
citation("ROntoTools")
devtools::install_github("elolab/PASI")
library(PASI)
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Data/PXD007884 T1D")
dir(getwd())
data = read.table("PXD007884_Entrez_Tommi.txt", sep="\t", quote="")
View(data)
temp = PASI(data, c(rep(0,100), rep(1,89)), noisedefault=NA)
View(temp)
summary(temp["hsa05165: Human papillomavirus infection",1:100])
devtools::install_github("elolab/PAL")
# Read in info for DAISY dataset
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Data/PXD007884 T1D")
data = read.table("PXD007884_Entrez_Tommi.txt", sep="\t", quote="", header=1)
info = read.table("PXD007884_SampleInfo.txt", sep="\t", quote="")
all(colnames(info) == rownames(data))
View(info)
View(data)
sum(colnames(info) == rownames(data))
sum(colnames(data) == rownames(info))
age_daisy = as.numeric(info$Age)
timefromsero_daisy = -1 * info$TimeToSeroconversion
timefromsero_daisy
# Read info for Diabimmune dataset
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Data/Diabimmune")
data_cd8 = read.table("Diabimmune_Entrez_CD8.txt", sep="\t", quote="", header=1, check.names=F)
donor_daisy = info$Donor
age_cd8 = as.numeric(gsub(".*_","",gsub("months.*","",colnames(data_cd8))))
View(data_cd8)
timefromsero_cd8 = as.numeric(gsub(".*fromsero", "", colnames(data_cd8)))
donor_cd8 = gsub("_.*", "", colnames(data_cd8))
# Read info for BabyDiet dataset
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Data/MTAB1724 BabyDiet")
data = read.table("MTAB1724_BabyDiet_Entrez.txt", sep="\t", quote="", header=1)
info = read.table("Info MTAB1724.txt", sep="\t", quote="", header=1)
all(colnames(data) == rownames(info))
age_baby = -1*info[colnames(data), "TimeFromSero"]
age_baby = info[colnames(data), "TimeFromSero"]
info[colnames(data), "TimeFromSero"]
age_baby = info[colnames(data), "Age"]
timefromsero_baby = -1*info[colnames(data), "TimeFromSero"]
donor_baby = info[colnames(data), "Donor"]
donor_baby
age_baby
timefromsero_baby
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Results/Results with donor")
load("PALdonor_AllOutputs.RData")
source("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Codes/PlotResults.R")
labels_daisy = rep(1, length(age_daisy))
labels_daisy[is.na(timefromsero_daisy)] = 0
labels_cd8 = rep(1, length(age_cd8))
labels_cd8[is.na(timefromsero_cd8)] = 0
labels_baby = rep(1, length(age_baby))
labels_baby[is.na(timefromsero_baby)] = 0
pdf("BabyDietDonor_all_xAge.pdf")
for(i in 1:nrow(pal_group_BabyDiet$pathwayscores)){
PlotResults(pal_group_BabyDiet$pathwayscores[i,], age_baby, "Age (years)", donors_baby, labels_baby, rownames(pal_group_BabyDiet$pathwayscores)[i])
}
graphics.off()
pdf("BabyDietDonor_all_xAge.pdf")
for(i in 1:nrow(pal_group_BabyDiet$pathwayscores)){
PlotResults(pal_group_BabyDiet$pathwayscores[i,], age_baby, "Age (years)", donor_baby, labels_baby, rownames(pal_group_BabyDiet$pathwayscores)[i])
}
graphics.off()
pdf("BabyDietDonor_all_xTimeFromSero.pdf")
for(i in 1:nrow(pal_time_BabyDiet$pathwayscores)){
PlotResults(pal_time_BabyDiet$pathwayscores[i,labels_baby==1], timefromsero_baby[labels_baby==1], "Time from seroconversion (years)",
donor_baby[labels_baby==1], labels_baby[labels_baby==1], rownames(pal_time_BabyDiet$pathwayscores)[i])
}
graphics.off()
pdf("DAISYdonor_all_xAge.pdf")
for(i in 1:nrow(pal_group_DAISY$pathwayscores)){
PlotResults(pal_group_DAISY$pathwayscores[i,], age_daisy, "Age (years)", donor_daisy, labels_daisy, rownames(pal_group_DAISY$pathwayscores)[i])
}
graphics.off()
pdf("DAISYdonor_all_xTimeFromSero.pdf")
for(i in 1:nrow(pal_time_DAISY$pathwayscores)){
PlotResults(pal_time_DAISY$pathwayscores[i,labels_daisy==1], timefromsero_daisy[labels_daisy==1], "Time from seroconversion (years)",
donor_daisy[labels_daisy==1], labels_daisy[labels_daisy==1], rownames(pal_time_DAISY$pathwayscores)[i])
}
graphics.off()
pdf("DiabimmuneCD8donor_all_xAge.pdf")
for(i in 1:nrow(pal_group_cd8$pathwayscores)){
PlotResults(pal_group_cd8$pathwayscores[i,], age_cd8y, "Age (months)", donor_cd8, labels_cd8, rownames(pal_group_cd8$pathwayscores)[i])
}
graphics.off()
pdf("DiabimmuneCD8donor_all_xTimeFromSero.pdf")
for(i in 1:nrow(pal_time_cd8$pathwayscores)){
PlotResults(pal_time_cd8$pathwayscores[i,labels_cd8==1], timefromsero_cd8[labels_cd8==1], "Time from seroconversion (months)",
donor_cd8[labels_cd8==1], labels_cd8[labels_cd8==1], rownames(pal_time_cd8$pathwayscores)[i])
}
graphics.off()
pdf("DiabimmuneCD8donor_all_xAge.pdf")
for(i in 1:nrow(pal_group_cd8$pathwayscores)){
PlotResults(pal_group_cd8$pathwayscores[i,], age_cd8, "Age (months)", donor_cd8, labels_cd8, rownames(pal_group_cd8$pathwayscores)[i])
}
graphics.off()
colnames(pal_group_DAISY$significance)
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Results/Results with donor/Plots")
pdf("DAISYdonor_significant_xAge.pdf")
for(i in which(pal_group_DAISY$significance[,"fdr_Control"] < 0.05)){
PlotResults(pal_group_DAISY$pathwayscores[i,], age_daisy, "Age (years)", donor_daisy, labels_daisy, rownames(pal_group_DAISY$pathwayscores)[i])
}
graphics.off()
colnames(pal_time_DAISY$significance)
pdf("DAISYdonor_significant_xTimeFromSero.pdf")
for(i in which(pal_time_DAISY$significance[,"fdr_"])){
PlotResults(pal_time_DAISY$pathwayscores[i,labels_daisy==1], timefromsero_daisy[labels_daisy==1], "Time from seroconversion (years)",
donor_daisy[labels_daisy==1], labels_daisy[labels_daisy==1], rownames(pal_time_DAISY$pathwayscores)[i])
}
graphics.off()
pdf("DAISYdonor_significant_xTimeFromSero.pdf")
for(i in which(pal_time_DAISY$significance[,"fdr_"] < 0.05)){
PlotResults(pal_time_DAISY$pathwayscores[i,labels_daisy==1], timefromsero_daisy[labels_daisy==1], "Time from seroconversion (years)",
donor_daisy[labels_daisy==1], labels_daisy[labels_daisy==1], rownames(pal_time_DAISY$pathwayscores)[i])
}
graphics.off()
pdf("DiabimmuneCD8donor_significant_xAge.pdf")
for(i in which(pal_group_cd8$significance[,"fdr_Control"] < 0.05)){
PlotResults(pal_group_cd8$pathwayscores[i,], age_cd8, "Age (months)", donor_cd8, labels_cd8, rownames(pal_group_cd8$pathwayscores)[i])
}
graphics.off()
pdf("DiabimmuneCD8donor_significant_xTimeFromSero.pdf")
for(i in which(pal_time_cd8$significance[,"fdr_"] < 0.05)){
PlotResults(pal_time_cd8$pathwayscores[i,labels_cd8==1], timefromsero_cd8[labels_cd8==1], "Time from seroconversion (months)",
donor_cd8[labels_cd8==1], labels_cd8[labels_cd8==1], rownames(pal_time_cd8$pathwayscores)[i])
}
graphics.off()
pdf("BabyDietDonor_significant_xAge.pdf")
for(i in which(pal_group_BabyDiet$significance[,"fdr_Control"] < 0.05)){
PlotResults(pal_group_BabyDiet$pathwayscores[i,], age_baby, "Age (years)", donor_baby, labels_baby, rownames(pal_group_BabyDiet$pathwayscores)[i])
}
graphics.off()
pdf("BabyDietDonor_significant_xTimeFromSero.pdf")
for(i in which(pal_time_BabyDiet$significance[,"fdr_"] < 0.05)){
PlotResults(pal_time_BabyDiet$pathwayscores[i,labels_baby==1], timefromsero_baby[labels_baby==1], "Time from seroconversion (years)",
donor_baby[labels_baby==1], labels_baby[labels_baby==1], rownames(pal_time_BabyDiet$pathwayscores)[i])
}
graphics.off()
getwd()
ReadFilePathways = function(pathtofiles){
#
oldwd = getwd()
setwd(pathtofiles)
files = dir(getwd())
files = grep(".txt", files, value=T)
# Read in pathways
pathways = lapply(files, function(f){
# Read in pathway components
rawlines = readLines(f)
splitlines = strsplit(rawlines, split=" ")
elementnum = lengths(splitlines)
# Check that they are ok
nodelineindex = which(elementnum[2:length(elementnum)] == 1) + 1
relationlineindex = which(elementnum[2:length(elementnum)] == 3) + 1
relations = as.data.frame(splitlines[relationlineindex])
if(any(!(unlist(relations[1:2,]) %in% rawlines[nodelineindex]))){
errormessage = paste(c("File pathway",f,"contains relation elements not listed as nodes."), collapse=" ")
stop(errormessage)
}
if(length(nodelineindex) < 1){
errormessage = paste(c("File pathway",f,"does not contain any nodes. See manual for file format instructions."), collapse=" ")
stop(errormessage)
}
if(any(!(elementnum[2:length(elementnum)] %in% c(1,3)))){
errormessage = paste(c("File pathway",f,"should contain rows with either 1 (nodes) or 3 (relations) elements. The first line is the only allowed exception."), collapse=" ")
stop(errormessage)
}
if(any(relations[1,] == relations[2,])){
errormessage = paste(c("File pathway",f,"should not contain relations from a node to itself."), collapse=" ")
stop(errormessage)
}
if(any(!(relations[3,] %in% c("+","-")))){
errormessage = paste(c("File pathway",f,"should contain only relations with regulation + (activation) or - (inhibition)."), collapse=" ")
stop(errormessage)
}
# Identify node lines and initialize node info
nodeinfo = as.data.frame(matrix(NA, ncol=4, nrow=length(nodelineindex)))
colnames(nodeinfo) = c("Id","Entrez","Type","Role") # SHOULD I ADD COMPONENT
# Fill node info
nodeinfo$Id = as.character(1:nrow(nodeinfo))
nodeinfo$Entrez = as.character(unlist(splitlines[nodelineindex]))
splitentrez = strsplit(rawlines[nodelineindex], split="_")
groupindex = which(lengths(splitentrez) > 1)
nodeinfo$Type = "gene"
nodeinfo$Type[groupindex] = "group"
# Identify relation lines and initialize relation info
if(length(relationlineindex) >= 1){
relationinfo = as.data.frame(matrix(NA, ncol=4, nrow=length(relationindex)))
colnames(relationinfo) = c("StartId","EndId","Direction","Role")
# Fill relation info
relationinfo$StartId = nodeinfo[match(as.character(relations[1,]), nodeinfo$Entrez), "Id"]
relationinfo$EndId = nodeinfo[match(as.character(relations[2,]), nodeinfo$Entrez), "Id"]
relationinfo$Direction = "activation"
relationinfo$Direction[which(relations[3,] == "-")] = "inhibition"
} else relationinfo = NA
pathway = list(nodeinfo=nodeinfo, relationinfo=relationinfo, pathwayname=rawlines[1])
return(pathway)
})
names(pathways) = gsub(".txt", "", files)
setwd(oldwd)
return(pathways)
}
temp = ReadFilePathways(getwd())
ReadFilePathways = function(pathtofiles){
#
oldwd = getwd()
setwd(pathtofiles)
files = dir(getwd())
files = grep(".txt", files, value=T)
# Read in pathways
pathways = lapply(files, function(f){
# Read in pathway components
rawlines = readLines(f)
splitlines = strsplit(rawlines, split=" ")
elementnum = lengths(splitlines)
# Check that they are ok
nodelineindex = which(elementnum[2:length(elementnum)] == 1) + 1
relationlineindex = which(elementnum[2:length(elementnum)] == 3) + 1
relations = as.data.frame(splitlines[relationlineindex])
if(any(!(unlist(relations[1:2,]) %in% rawlines[nodelineindex]))){
errormessage = paste(c("File pathway",f,"contains relation elements not listed as nodes."), collapse=" ")
stop(errormessage)
}
if(length(nodelineindex) < 1){
errormessage = paste(c("File pathway",f,"does not contain any nodes. See manual for file format instructions."), collapse=" ")
stop(errormessage)
}
if(any(!(elementnum[2:length(elementnum)] %in% c(1,3)))){
errormessage = paste(c("File pathway",f,"should contain rows with either 1 (nodes) or 3 (relations) elements. The first line is the only allowed exception."), collapse=" ")
stop(errormessage)
}
if(any(relations[1,] == relations[2,])){
errormessage = paste(c("File pathway",f,"should not contain relations from a node to itself."), collapse=" ")
stop(errormessage)
}
if(any(!(relations[3,] %in% c("+","-")))){
errormessage = paste(c("File pathway",f,"should contain only relations with regulation + (activation) or - (inhibition)."), collapse=" ")
stop(errormessage)
}
# Identify node lines and initialize node info
nodeinfo = as.data.frame(matrix(NA, ncol=4, nrow=length(nodelineindex)))
colnames(nodeinfo) = c("Id","Entrez","Type","Role") # SHOULD I ADD COMPONENT
# Fill node info
nodeinfo$Id = as.character(1:nrow(nodeinfo))
nodeinfo$Entrez = as.character(unlist(splitlines[nodelineindex]))
splitentrez = strsplit(rawlines[nodelineindex], split="_")
groupindex = which(lengths(splitentrez) > 1)
nodeinfo$Type = "gene"
nodeinfo$Type[groupindex] = "group"
# Identify relation lines and initialize relation info
if(length(relationlineindex) >= 1){
relationinfo = as.data.frame(matrix(NA, ncol=4, nrow=length(relationlineindex)))
colnames(relationinfo) = c("StartId","EndId","Direction","Role")
# Fill relation info
relationinfo$StartId = nodeinfo[match(as.character(relations[1,]), nodeinfo$Entrez), "Id"]
relationinfo$EndId = nodeinfo[match(as.character(relations[2,]), nodeinfo$Entrez), "Id"]
relationinfo$Direction = "activation"
relationinfo$Direction[which(relations[3,] == "-")] = "inhibition"
} else relationinfo = NA
pathway = list(nodeinfo=nodeinfo, relationinfo=relationinfo, pathwayname=rawlines[1])
return(pathway)
})
names(pathways) = gsub(".txt", "", files)
setwd(oldwd)
return(pathways)
}
temp = ReadFilePathways(getwd())
temp
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Data")
dir(getwd())
load("PreprocessedKEGGpathways.RData")
nrow(pathways$hsa00230$nodeinfo)
temp = pathways[c("hsa00730","hsa00230")]
entrez = lapply(temp,function(p){as.character(p$nodeinfo[,"Entrez"])})
entrez = unlist(entrez)
entrez
names(entrez) = NULL
entrez
toy = data[entrez,]
View(toy)
sample(3:5, size=9)
sample(3:5, size=9, replace = T)
points = sample(3:5, size=9, replace = T)
points
donors = c(paste("Control",1:5), paste("Case",1:4))
donors
donors = rep(donors, times=points)
donors
donors = c(paste("Control",1:5), paste("Case",1:4))donors = rep(donors, times=points)
donors = c(paste("Control",1:5, sep=""), paste("Case",1:4,sep=""))donors = rep(donors, times=points)
donors = c(paste("Control",1:5, sep=""), paste("Case",1:4,sep=""))
donors = rep(donors, times=points)
donors
lengths(donors)
rle(donors)
ages = unlist(lapply(points, function(d){sort(runif(d, min=1, max=10), decreasing=F)}))
ages
ages = round(ages, digits=1)
ages
ages = unlist(lapply(points, function(d){sort(round(runif(d, min=1, max=10),digits=1), decreasing=F)}))
ages
samplenames= paste(donors, ages, sep="_")
samplenames
toydata = as.data.frame(lapply(samplenames, function(s){rowMeans(toy[,sample(1:ncol(toy),4)])}))
View(toydata)
colnames(toydata) = samplenames
toy = toydata[!is.na(toydata[,1]),]
View(toy)
setwd("C:/Users/makija/Documents/Research/Project 14 PASI for longitudinal data/Codes/PAL git/data")
write.table(toy, file="ExampleData.txt", sep="\t", quote=F)
ages = as.numeric(gsub(".*_","",samplenames))
ages
donors
diagnosis = c(9, 7.4, 6, 7.6)
timeto = rep(NA,length(samplenames))
caseind = lapply(c("Case1","Case2","Case3","Case4"), function(s){grep(s, donors)})
caseind
for(s in 1:4) timeto[caseind[[s]]] = diagnosis[s] - ages[caseind[[s]]]
timeto
info = data.frame(ages, donors, timeto)
colnames(info) = c("Age", "Donor", "TimeToDiagnosis")
rownames(info) = colnames(toy)
write.table(cbind(colnames(toy),info), file="ExampleInfo.txt", sep="\t")
write.table(cbind(colnames(toy),info), file="ExampleInfo.txt", sep="\t", quote=F, row.names=NULL)
write.table(cbind(colnames(toy),info), file="ExampleInfo.txt", sep="\t", quote=F, row.names=F)
